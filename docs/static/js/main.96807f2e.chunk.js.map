{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","className","placeholder","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEXC,mBAAS,IAFE,mBAExCC,EAFwC,KAE5BC,EAF4B,KAiB/C,OACI,oCACA,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAQd,2BAAOO,UAAU,aACbC,YAAY,SACZC,KAAM,OACNC,MAAQX,EACRY,SArBc,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,a,uBCLlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAGbC,EAHa,iDAGoCC,UAAWH,GAH/C,+DAKAI,MAAOF,GALP,cAKbG,EALa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAiBZM,GAjBY,4CAAH,sDCDPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,yBAAKT,UAAU,8CACZ,yBAAKuB,IAAMd,EAAMe,IAAML,IACvB,+BAAMA,EAAN,OCDEM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EAEXhB,mBAAS,CAChCuB,KAAM,GACNY,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA2BlC,OApBJC,qBAAW,WAEPvB,EAAQC,GACHuB,MAAM,SAAAC,GACHH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAItB,CAACnB,IAUOoB,EDxBsBK,CAAazB,GAAjCa,EAHwB,EAG7BN,KAAaY,EAHgB,EAGhBA,QAErB,OACI,oCACI,wBAAI1B,UAAU,qCAAd,IAAoDO,EAApD,KAEEmB,GAAW,uBAAI1B,UAAU,oCAAd,WAEb,yBAAKA,UAAU,aAGPoB,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIgB,IAAMhB,EAAIC,IACLD,UEjBpBiB,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,cAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAU9B,OACI,oCACI,wBAAIU,UAAU,gBAAd,YACA,kBAAC,EAAD,CAAaV,cAAgBA,IAC7B,6BAIJ,4BAEQ6C,EAAWnB,KAAK,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACA0B,IAAM1B,EACNA,SAAWA,U,MCrBhC6B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.96807f2e.chunk.js","sourcesContent":["// Utilizar como atajo rafc para ue me importe react y me cree la funcion directamete\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories } ) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    } \r\n\r\n    const handlesubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (inputValue.trim().length > 1) {\r\n            setCategories(cats => [inputValue, ...cats, ]);\r\n            setinputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={ handlesubmit }>\r\n            <input className=\"inputValue\"\r\n                placeholder=\"Buscar\"\r\n                type= \"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n   \r\n   \r\nexport const getGifs = async ( category ) => {\r\n\r\n        // El encodeURI sirve para quitarle los espacios \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=20&api_key=RVmHY5a9q3sWhtcQzM3gpqZmPV8J6eiC`;\r\n        \r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        \r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n            \r\n    return gifs;\r\n\r\n}\r\n            ","import React from 'react';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n           <img src={ url } alt={ title } />\r\n           <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n\r\n            { loading && <p  className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n// Esto sirve para realizar la peticion fetch e indicar cuando esta cargando y cuando termino la carga\r\n\r\n// Cuando se actualice el useFetchGifs tenemos este estado que va a estar cargando por defecto\r\nexport const useFetchGifs = (category) => {\r\n   \r\n    const [state, setState] =  useState({\r\n        data: [],   \r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false            \r\n                });\r\n            })\r\n            \r\n    }, [category])\r\n     // mando esta informacion de category para que el use Efeect sepa cuando cambia de estado y renderice\r\n\r\n    // setTimeout( () => { \r\n    //   setState({  data: [1,2,3,4,5],\r\n    //     loading: false,\r\n    // })\r\n    // }, 3000);\r\n\r\n    \r\n        return state;   // { retorna data[] y loading: true }\r\n    }\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories([ HunterXHunter, ...categories ])\r\n    //     // setCategories( cats => [...cats, 'HunterXHunter']); //El set categories puede tener un callback, donde el primer argumento\r\n    //                                                      // es el valor del estado anterior y luego retorna el nuevo estaado\r\n    // }\r\n\r\n    return (\r\n        <>  \r\n            <h2 className=\"gifExpertApp\">Gifs App</h2>\r\n            <AddCategory setCategories={ setCategories} />\r\n            <hr />\r\n\r\n        {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n        <ol>\r\n            {\r\n                categories.map( category => (\r\n                     <GifGrid\r\n                     key={ category } \r\n                     category={ category } \r\n                     />\r\n                    // El map debe tener un key paraa cada item del array\r\n               \r\n                 ))\r\n            }\r\n        </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}